"""
Main application for Stock Price Agent
"""
import json
import os
from datetime import datetime, timedelta
from config import Config
from agents.stock_agent import StockDataAgent
from agents.gemini_agent import GeminiStockAnalyzer
from processors.data_processor import StockDataProcessor
from utils.visualization import StockVisualizer


class StockPriceApp:
    """
    Main application class
    """
    
    def __init__(self):
        # Validate configuration
        try:
            Config.validate()
        except ValueError as e:
            print(f"‚ùå Configuration Error: {e}")
            print("Please check your .env file and ensure all required API keys are set.")
            return
        
        # Initialize components
        self.stock_agent = StockDataAgent()
        self.gemini_analyzer = GeminiStockAnalyzer(self.stock_agent)
        self.data_processor = StockDataProcessor()
        self.visualizer = StockVisualizer()
        
        print("ü§ñ Stock Price Agent ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
        print("üìä S·∫µn s√†ng ph√¢n t√≠ch c·ªï phi·∫øu v·ªõi Gemini AI v√† Polygon API")

    def demo_simple(self):
        """
        Demo ƒë∆°n gi·∫£n ƒë·ªÉ tr√°nh rate limit
        """
        symbol = "AAPL"
        print(f"\nüçé DEMO ƒê·ªöN GI·∫¢N: Ph√¢n t√≠ch c·ªï phi·∫øu {symbol}")
        print("=" * 50)

        # 1. L·∫•y gi√° hi·ªán t·∫°i
        print("\nüìà 1. Gi√° hi·ªán t·∫°i:")
        current_price = self.stock_agent.get_current_price(symbol)
        print(json.dumps(current_price, indent=2, ensure_ascii=False))

        # 2. Ph√¢n t√≠ch v·ªõi Gemini AI (n·∫øu c√≥ d·ªØ li·ªáu)
        if "error" not in current_price:
            print(f"\nüß† 2. Ph√¢n t√≠ch AI:")
            analysis = self.gemini_analyzer.analyze_stock_data(current_price)
            print(analysis)

        # 3. H·ªèi m·ªôt c√¢u ƒë∆°n gi·∫£n
        print(f"\nüí≠ 3. H·ªèi AI:")
        question = f"D·ª±a tr√™n gi√° hi·ªán t·∫°i, {symbol} c√≥ ƒë√°ng mua kh√¥ng?"
        answer = self.gemini_analyzer.answer_stock_question(question, symbol)
        print(f"‚ùì C√¢u h·ªèi: {question}")
        print(f"ü§ñ Tr·∫£ l·ªùi: {answer}")

    def demo_full(self):
        """
        Demo ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng
        """
        symbol = "AAPL"
        print(f"\nüçé DEMO ƒê·∫¶Y ƒê·ª¶: Ph√¢n t√≠ch c·ªï phi·∫øu {symbol}")
        print("=" * 50)

        # 1. L·∫•y gi√° hi·ªán t·∫°i
        print("\nüìà 1. Gi√° hi·ªán t·∫°i:")
        current_price = self.stock_agent.get_current_price(symbol)
        print(json.dumps(current_price, indent=2, ensure_ascii=False))

        # 2. L·∫•y d·ªØ li·ªáu daily open/close
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        print(f"\nüìä 2. D·ªØ li·ªáu open/close ng√†y {yesterday}:")
        daily_data = self.stock_agent.get_daily_open_close(symbol, yesterday)
        print(json.dumps(daily_data, indent=2, ensure_ascii=False))

        # 3. Ph√¢n t√≠ch v·ªõi Gemini AI
        print(f"\nüß† 3. Ph√¢n t√≠ch AI:")
        if "error" not in daily_data:
            analysis = self.gemini_analyzer.analyze_stock_data(daily_data)
            print(analysis)

        # 4. L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠
        print(f"\nüìà 4. D·ªØ li·ªáu l·ªãch s·ª≠ 10 ng√†y:")
        historical_data = self.stock_agent.get_historical_data(symbol, 10)

        if historical_data:
            df = self.data_processor.process_daily_data(historical_data)
            df_with_features = self.data_processor.create_ml_features(df)

            print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(df)} b·∫£n ghi")
            
            # 5. Th·ªëng k√™
            stats = self.data_processor.calculate_statistics(df_with_features)
            print(f"\nüìä 5. Th·ªëng k√™:")
            print(f"Gi√° hi·ªán t·∫°i: ${stats['price_stats']['current_price']:.2f}")
            print(f"T·ªïng l·ª£i nhu·∫≠n: {stats['performance']['total_return']:.2f}%")
            print(f"Volatility: {stats['price_stats']['price_volatility']:.2f}")

            # 6. Pattern detection
            patterns = self.data_processor.detect_patterns(df_with_features)
            print(f"\nüîç 6. Ph√°t hi·ªán patterns:")
            for key, value in patterns.items():
                print(f"  {key}: {value}")

            # 7. Visualization
            print(f"\nüìä 7. T·∫°o bi·ªÉu ƒë·ªì:")
            self.visualizer.plot_price_history(df_with_features, symbol)
            self.visualizer.create_summary_dashboard(df_with_features, symbol, stats)

        # 8. Q&A v·ªõi AI
        print(f"\nüí≠ 8. H·ªèi ƒë√°p v·ªõi AI:")
        question = f"Ph√¢n t√≠ch xu h∆∞·ªõng v√† ƒë∆∞a ra khuy·∫øn ngh·ªã cho {symbol}?"
        answer = self.gemini_analyzer.answer_stock_question(question, symbol)
        print(f"‚ùì C√¢u h·ªèi: {question}")
        print(f"ü§ñ Tr·∫£ l·ªùi: {answer}")

    def interactive_mode(self):
        """
        Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng
        """
        print("\nü§ñ STOCK PRICE AGENT - Interactive Mode")
        print("=" * 50)
        print("C√°c l·ªánh c√≥ s·∫µn:")
        print("- 'price [SYMBOL]': L·∫•y gi√° hi·ªán t·∫°i")
        print("- 'daily [SYMBOL] [DATE]': L·∫•y d·ªØ li·ªáu ng√†y c·ª• th·ªÉ (YYYY-MM-DD)")
        print("- 'history [SYMBOL] [DAYS]': L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠")
        print("- 'analyze [SYMBOL]': Ph√¢n t√≠ch v·ªõi AI")
        print("- 'chart [SYMBOL] [DAYS]': V·∫Ω bi·ªÉu ƒë·ªì")
        print("- 'dashboard [SYMBOL] [DAYS]': T·∫°o dashboard")
        print("- 'ask [question] about [SYMBOL]': H·ªèi AI")
        print("- 'models': Xem danh s√°ch Gemini models")
        print("- 'quit': Tho√°t")
        print("=" * 50)

        while True:
            try:
                command = input("\nüí¨ Nh·∫≠p l·ªánh (ho·∫∑c 'quit' ƒë·ªÉ tho√°t): ").strip()

                if command.lower() == 'quit':
                    print("üëã T·∫°m bi·ªát!")
                    break

                parts = command.split()
                if not parts:
                    continue

                action = parts[0].lower()

                if action == 'price' and len(parts) >= 2:
                    symbol = parts[1].upper()
                    result = self.stock_agent.get_current_price(symbol)
                    print(f"\nüìà Gi√° hi·ªán t·∫°i c·ªßa {symbol}:")
                    print(json.dumps(result, indent=2, ensure_ascii=False))

                elif action == 'daily' and len(parts) >= 3:
                    symbol = parts[1].upper()
                    date = parts[2]
                    result = self.stock_agent.get_daily_open_close(symbol, date)
                    print(f"\nüìä D·ªØ li·ªáu {symbol} ng√†y {date}:")
                    print(json.dumps(result, indent=2, ensure_ascii=False))

                elif action == 'history' and len(parts) >= 3:
                    symbol = parts[1].upper()
                    days = int(parts[2])
                    result = self.stock_agent.get_historical_data(symbol, days)
                    print(f"\nüìà L·ªãch s·ª≠ {symbol} trong {days} ng√†y:")
                    
                    if result:
                        df = self.data_processor.process_daily_data(result)
                        print(df[['date', 'open', 'close', 'price_change_pct', 'volume']].to_string(index=False))
                    else:
                        print("Kh√¥ng c√≥ d·ªØ li·ªáu")

                elif action == 'analyze' and len(parts) >= 2:
                    symbol = parts[1].upper()
                    current_data = self.stock_agent.get_current_price(symbol)
                    analysis = self.gemini_analyzer.analyze_stock_data(current_data)
                    print(f"\nüß† Ph√¢n t√≠ch AI cho {symbol}:")
                    print(analysis)

                elif action == 'chart' and len(parts) >= 3:
                    symbol = parts[1].upper()
                    days = int(parts[2])
                    historical_data = self.stock_agent.get_historical_data(symbol, days)
                    
                    if historical_data:
                        df = self.data_processor.process_daily_data(historical_data)
                        df = self.data_processor.create_ml_features(df)
                        self.visualizer.plot_price_history(df, symbol)
                    else:
                        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì")

                elif action == 'dashboard' and len(parts) >= 3:
                    symbol = parts[1].upper()
                    days = int(parts[2])
                    historical_data = self.stock_agent.get_historical_data(symbol, days)
                    
                    if historical_data:
                        df = self.data_processor.process_daily_data(historical_data)
                        df = self.data_processor.create_ml_features(df)
                        stats = self.data_processor.calculate_statistics(df)
                        self.visualizer.create_summary_dashboard(df, symbol, stats)
                    else:
                        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o dashboard")

                elif action == 'ask':
                    if 'about' in command:
                        question_part, symbol_part = command.split('about', 1)
                        question = question_part.replace('ask', '').strip()
                        symbol = symbol_part.strip().upper()

                        answer = self.gemini_analyzer.answer_stock_question(question, symbol)
                        print(f"\nü§ñ AI tr·∫£ l·ªùi v·ªÅ {symbol}:")
                        print(answer)
                    else:
                        question = ' '.join(parts[1:])
                        answer = self.gemini_analyzer.answer_stock_question(question)
                        print(f"\nü§ñ AI tr·∫£ l·ªùi:")
                        print(answer)

                elif action == 'models':
                    models = self.gemini_analyzer.get_available_models()
                    print(f"\nüîç C√°c Gemini models c√≥ s·∫µn:")
                    for model in models:
                        print(f"  ‚úÖ {model}")

                else:
                    print("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

            except KeyboardInterrupt:
                print("\nüëã T·∫°m bi·ªát!")
                break
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")

    def run(self):
        """
        Ch·∫°y ·ª©ng d·ª•ng v·ªõi menu ch·ªçn
        """
        if not hasattr(self, 'stock_agent'):
            return
            
        print("\nüöÄ STOCK PRICE AGENT")
        print("=" * 30)
        print("1. Demo ƒë∆°n gi·∫£n")
        print("2. Demo ƒë·∫ßy ƒë·ªß")
        print("3. Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c")
        print("4. Tho√°t")
        
        while True:
            try:
                choice = input("\nüëâ Ch·ªçn ch·∫ø ƒë·ªô (1-4): ").strip()
                
                if choice == '1':
                    self.demo_simple()
                elif choice == '2':
                    self.demo_full()
                elif choice == '3':
                    self.interactive_mode()
                elif choice == '4':
                    print("üëã T·∫°m bi·ªát!")
                    break
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-4.")
                    
            except KeyboardInterrupt:
                print("\nüëã T·∫°m bi·ªát!")
                break


def main():
    """Main function"""
    app = StockPriceApp()
    app.run()


if __name__ == "__main__":
    main()